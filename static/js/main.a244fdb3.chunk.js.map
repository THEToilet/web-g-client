{"version":3,"sources":["store/slices/gSignalingStatus.ts","hooks/useGeoLocation.ts","hooks/useWebSocket.ts","components/HeaderBar.tsx","components/Balloon.tsx","components/Marker.tsx","store/selector/index.ts","components/GoogleMaps.tsx","store/slices/p2pStatus.ts","hooks/useConnection.ts","store/slices/gSetting.ts","components/OperationPanel.tsx","components/Video.tsx","components/OpenStreetMaps.tsx","handler/wsMessages.ts","hooks/useUserMedia.ts","handler/RTConnection.ts","views/App.tsx","store/slices/wsConnectionStatus.ts","store/slices/index.ts","store/index.ts","index.tsx"],"names":["gSignalingStatusSlice","createSlice","name","initialState","userInfo","userID","geoLocation","latitude","longitude","surroundingUserList","isRegister","reducers","setUserInfoGeoLocation","state","payload","setSurroundingUserList","setIsRegister","setUserID","actions","useGeoLocationStatus","useState","setGeoLocation","dispatch","useDispatch","navigator","geolocation","watchPosition","position","Number","coords","err","console","error","useWebSocket","message","setMessage","socketRef","useRef","connectionIntervalRef","waitForIntervalRef","timeout","useEffect","clearTimeout","current","onOpen","onMessage","event","data","onError","close","onClose","e","log","setTimeout","check","Math","min","readyState","WebSocket","CLOSED","connect","addEventListener","sendMessage","a","waitForConnection","send","String","Date","callback","interval","OPEN","HeaderBar","Box","sx","flexGrow","AppBar","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","BalloonWindow","styled","div","BalloonText","Balloon","props","className","Mark","Marker","isOpen","setIsOpen","onClick","style","backgroundColor","cursor","title","lat","lng","getGSetting","gSetting","getGSignalingStatus","gSignalingState","getP2PStatus","p2pState","GoogleMaps","useSelector","searchDistance","isRefreshingMap","setIsRefreshingMap","defaultGeoLocation","zoom","refreshMap","catch","Markers","map","height","width","bootstrapURLKeys","key","defaultCenter","defaultZoom","onGoogleApiLoaded","maps","Circle","text","p2pStatusSlice","destinationUserID","setDestinationUserID","useConnection","rawMessage","wsMessage","setICECandidate","setOffer","setAnswer","disconnect","isSendRegisterOnce","setIsRegisterOnce","messageType","JSON","parse","type","sendPong","registerResponse","updateResponse","searchResponse","deleteResponse","offerMessage","destination","sdp","answerMessage","iceCandidate","ice","t","stringify","RTCIceCandidate","closeRequest","timeoutUpdate","setInterval","sendUpdate","timeoutSearch","sendStaticSearch","sendRegister","gSettingSlice","searchType","setSearchDistance","setStaticSearch","setDynamicSearch","OperationPanel","searchDistanceFiledRef","length","FormControl","m","minWidth","TextField","inputRef","id","label","defaultValue","Button","value","InputLabel","Select","labelId","onChange","target","autoWidth","MenuItem","Video","isPlay","setIsPlay","playVideo","element","stream","srcObject","play","ref","localVideoRef","autoPlay","border","remoteVideoRef","pause","DefaultIcon","Leaflet","icon","iconUrl","shadowUrl","iconShadow","prototype","options","OpenStreetMaps","LatLng","MapContainer","center","TileLayer","attribution","url","radius","Popup","WSMessages","this","useUserMedia","videoRef","localStream","mediaDevices","getUserMedia","audio","video","then","RTConnection","localMessageRef","remoteMessageRef","rtcPeerConnection","rtcDataChannel","onTrack","streams","onIcecandidate","candidate","sendCandidate","onNegotiationneeded","onIceConnectionstatechange","iceConnectionState","onDataChannel","evt","channel","makeRTCPeerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","createDataChannel","setRemoteDescription","makeAnswer","createAnswer","answer","setLocalDescription","sendAnswer","createOffer","sendOffer","addIceCandidate","sendClose","connectionState","App","sendDataChanelMessage","isMapGoogle","setIsMapGoogle","setDestination","textAlign","charSet","rel","href","readOnly","wsConnectionSlice","wsConnectionType","connecting","connected","reconnecting","reconnected","rootReducer","combineReducers","wsConnectionState","WSConnectionStatus","GSetting","GSignalingStatus","P2PStatus","store","configureStore","reducer","devTools","process","rawUseSelector","whyDidYouUpdate","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a244fdb3.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {GSignalingState} from '../type'\r\nimport {GeoLocation, UserInfo} from '../../types/domain'\r\n\r\nexport const initialState: GSignalingState = {\r\n    userInfo: {\r\n        userID : '',\r\n        geoLocation: {\r\n            latitude: 0,\r\n            longitude: 0,\r\n        },\r\n    },\r\n    surroundingUserList: [],\r\n    isRegister: false,\r\n    userID: \"\",\r\n}\r\n\r\nconst gSignalingStatusSlice = createSlice({\r\n    name: 'gSignalingStatus',\r\n    initialState,\r\n    reducers: {\r\n\r\n        setUserInfoGeoLocation: (state, {payload}: PayloadAction<GeoLocation>) => {\r\n            state.userInfo.geoLocation = payload\r\n        },\r\n\r\n        setSurroundingUserList: (state, {payload}: PayloadAction<UserInfo[]>) => {\r\n            state.surroundingUserList = payload\r\n        },\r\n\r\n        setIsRegister: (state) => {\r\n            state.isRegister = !state.isRegister\r\n        },\r\n\r\n        setUserID: (state, {payload}: PayloadAction<string>) => {\r\n            state.userID = payload\r\n        },\r\n    },\r\n})\r\nexport const {\r\n    setUserInfoGeoLocation,\r\n    setSurroundingUserList,\r\n    setIsRegister,\r\n    setUserID\r\n} = gSignalingStatusSlice.actions;\r\n\r\nexport default gSignalingStatusSlice.reducer","import {useState} from \"react\";\r\nimport {GeoLocation} from '../types/domain'\r\nimport {setUserInfoGeoLocation} from '../store/slices/gSignalingStatus'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst useGeoLocationStatus = () => {\r\n    const [geoLocation, setGeoLocation] = useState<GeoLocation>({\r\n        latitude: 35.943218,\r\n        longitude: 139.621248\r\n    });\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*\r\n    const getGeoLocation = () => {\r\n        //console.log(new Date(), ' : getGeoLocation')\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            setGeoLocation({\r\n                latitude: Number(position.coords.latitude),\r\n                longitude: Number(position.coords.longitude),\r\n            });\r\n        }, () => {\r\n            // NOTE: 位置情報が得られなかったときはデフォルト値を入れる\r\n            setGeoLocation({\r\n                latitude: 34.673542,\r\n                longitude: 135.433338\r\n            });\r\n            //setUserInfoGeoLocation(geoLocation)\r\n        })\r\n        dispatch(setUserInfoGeoLocation(geoLocation))\r\n    }\r\n     */\r\n\r\n    const success = (position: any) => {\r\n        setGeoLocation({\r\n            latitude: Number(position.coords.latitude),\r\n            longitude: Number(position.coords.longitude),\r\n        });\r\n        dispatch(setUserInfoGeoLocation(geoLocation))\r\n    }\r\n\r\n    const error = (err: any) => {\r\n        console.error(err)\r\n        setGeoLocation({\r\n            latitude: 35.943218,\r\n            longitude: 139.621248\r\n        });\r\n        dispatch(setUserInfoGeoLocation(geoLocation))\r\n    }\r\n    /*\r\n    // TODO: 本来の仕様通りのものにする\r\n    // 二秒ごとに位置情報を取得\r\n    useEffect(() => {\r\n        getGeoLocation()\r\n        const regularG = setTimeout(getGeoLocation\r\n            , 2000)\r\n        return () => {\r\n            clearTimeout(regularG)\r\n        }\r\n    }, [getGeoLocation])\r\n     */\r\n    navigator.geolocation.watchPosition(success, error)\r\n\r\n    return geoLocation\r\n}\r\nexport default useGeoLocationStatus","import {useEffect, useRef, useState} from \"react\";\r\n\r\nconst useWebSocket = () => {\r\n\r\n    const [message, setMessage] = useState<string>(\"\")\r\n    const socketRef = useRef<WebSocket>(null!)\r\n\r\n    const connectionIntervalRef = useRef<NodeJS.Timeout>()\r\n    const waitForIntervalRef = useRef<NodeJS.Timeout>()\r\n\r\n    let timeout: number = 100\r\n\r\n    useEffect(() => {\r\n            return () => {\r\n                clearTimeout(waitForIntervalRef.current!)\r\n                clearTimeout(connectionIntervalRef.current!)\r\n            }\r\n        }, []\r\n    )\r\n\r\n    const onOpen = () => {\r\n        clearTimeout(connectionIntervalRef.current!)\r\n    }\r\n\r\n    const onMessage = (event: any) => {\r\n        setMessage(event.data)\r\n    }\r\n\r\n    const onError = (error: any) => {\r\n        console.error(\"WebSocket error: \", error)\r\n        socketRef.current.close()\r\n    }\r\n\r\n    // NOTE: 指数関数的バックオフらしい\r\n    // REFERENCE: https://dev.to/finallynero/using-websockets-in-react-4fkp\r\n    const onClose = (e: any) => {\r\n        console.log(\r\n            'WebSocket is closed :',\r\n            e\r\n        );\r\n        // NOTE: 呼び出されるたびにタイムアウト時間を増やす\r\n        // TODO: ここは指数関数的に増やす\r\n        timeout = timeout + timeout;\r\n        // NOTE: 再接続処理\r\n        connectionIntervalRef.current = setTimeout(check, Math.min(10000, timeout));\r\n    }\r\n\r\n    const check = () => {\r\n        if (!socketRef.current || socketRef.current.readyState === WebSocket.CLOSED) {\r\n            connect()\r\n        }\r\n    }\r\n\r\n    const connect = () => {\r\n        console.log(\"connecting....\")\r\n        //socketRef.current = new WebSocket(\"ws://127.0.0.1:8080/signaling\")\r\n        socketRef.current = new WebSocket(\"wss://118.27.20.107:8080/signaling\")\r\n        socketRef.current.addEventListener('open', onOpen)\r\n        socketRef.current.addEventListener('message', onMessage)\r\n        socketRef.current.addEventListener('error', onError)\r\n        socketRef.current.addEventListener('close', onClose)\r\n    }\r\n\r\n    useEffect(() => {\r\n        connect()\r\n        // NOTE: 依存配列にconnectを入れるとレンダーするたびにscoketが作られるので注意\r\n    }, [])\r\n\r\n    // REFERENCE: https://stackoverflow.com/questions/23051416/uncaught-invalidstateerror-failed-to-execute-send-on-websocket-still-in-co\r\n    const sendMessage = async (message: String) => {\r\n        waitForConnection(() => {\r\n            try {\r\n                socketRef.current.send(String(message))\r\n                console.log(new Date(), 'message : ', message)\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    // TODO: clearTimeoutは必要か調べる\r\n    // NOTE: WebSocketのコネクションが確立するまで待つ\r\n    const waitForConnection = (callback: any, interval: number) => {\r\n        if (socketRef.current.readyState === WebSocket.OPEN) {\r\n            callback()\r\n        } else {\r\n            waitForIntervalRef.current! = setTimeout(() => {\r\n                waitForConnection(callback, interval)\r\n            }, interval)\r\n        }\r\n    }\r\n\r\n    // NOTE: TypeScriptでは as const　をつける\r\n    return [message, sendMessage] as const;\r\n}\r\n\r\nexport default useWebSocket;\r\n","import Box from \"@mui/material/Box\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst HeaderBar = () => {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"g-client\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        g-client\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default HeaderBar","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// https://codesandbox.io/embed/google-maps-react-9slxw?fontsize=14&hidenavigation=1&theme=dark:w\r\n\r\nconst BalloonWindow = styled.div`\r\n  background: #ffffff;\r\n  width: 200px;\r\n  height: 150px;\r\n  position: absolute;\r\n  top: -200px;\r\n  left: 0px;\r\n  transform: translate(-50%);\r\n  border-radius: 10px;\r\n\r\n  :after {\r\n    content: \"\";\r\n    position: absolute;\r\n    z-index: -1;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: -24px;\r\n    display: block;\r\n    width: 0;\r\n    height: 0;\r\n    margin: 0 auto;\r\n    border-style: solid;\r\n    border-width: 25px 25px 0 25px;\r\n    border-color: #ffffff transparent transparent transparent;\r\n  }\r\n`;\r\n\r\nconst BalloonText = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translateY(-50%) translateX(-50%);\r\n  font-size: 12pt\r\n`;\r\n\r\n// TODO : 型変える\r\n\r\n/*\r\ntype ContainerProps = {}\r\ntype Props = {} & ContainerProps\r\n\r\nconst Component: React.FC<Props> = props => (\r\n    <BalloonWindow className={\"scrollWindow\"}>\r\n        <BalloonText>{\"userID: \" + props.userInfo.userID + \"\\nlat: \" + props.userInfo.latitude + \"\\nlng: \" + props.userInfo.longitude}</BalloonText>\r\n    </BalloonWindow>\r\n)\r\n */\r\n\r\n\r\nconst Balloon = (props: any) => {\r\n    return (\r\n        <BalloonWindow className={\"scrollWindow\"}>\r\n            <BalloonText>{\"userID: \" + props.userInfo.userID + \"\\nlat: \" + props.userInfo.latitude + \"\\nlng: \" + props.userInfo.longitude}</BalloonText>\r\n        </BalloonWindow>\r\n    );\r\n};\r\n\r\nexport default Balloon;","import styled from \"styled-components\";\r\nimport {useState} from \"react\";\r\nimport Balloon from \"./Balloon\";\r\n\r\n// https://levelup.gitconnected.com/reactjs-google-maps-with-custom-marker-ece0c7d184c4\r\nconst Mark = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 18px;\r\n  height: 18px;\r\n  background-color: #000;\r\n  border: 2px solid #fff;\r\n  border-radius: 100%;\r\n  user-select: none;\r\n  transform: translate(-50%, -50%);\r\n\r\n  &:hover {\r\n    z-index: 1;\r\n  }\r\n\r\n`;\r\n\r\n/*<div><Pin style={{backgroundColor:color}} title={name}/><Pulse/></div>*/\r\nconst Marker = (props: any) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false)\r\n    const changeState = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n    const {color, name} = props\r\n    return (\r\n        <div onClick={changeState}>\r\n            <Mark style={{backgroundColor: color, cursor: 'pointer'}}\r\n                  title={name}/>\r\n            {isOpen ? (\r\n                <Balloon lat={props.lat} lng={props.lng} userInfo={props.userInfo}/>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Marker","import {RootState} from \"../index\";\r\n\r\nexport const getGSetting = (state: RootState) => state.gSetting\r\nexport const getGSignalingStatus = (state: RootState) => state.gSignalingState\r\nexport const getConnectionStatus = (state: RootState) => state.wsConnectionState\r\nexport const getP2PStatus = (state: RootState) => state.p2pState\r\n","import GoogleMapReact from \"google-map-react\";\r\nimport Marker from \"./Marker\";\r\n\r\nimport {getGSetting, getGSignalingStatus} from '../store/selector'\r\nimport {useSelector} from \"react-redux\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {UserInfo} from \"../types/domain\";\r\n\r\nconst APIKEY = \"\";\r\n// TODO: connectように型を付ける\r\nconst GoogleMaps = (props: any) => {\r\n    const {surroundingUserList, userInfo: {geoLocation}} = useSelector(getGSignalingStatus)\r\n    const {searchDistance} = useSelector(getGSetting)\r\n\r\n    const [isRefreshingMap, setIsRefreshingMap] = useState<boolean>(false)\r\n\r\n    const defaultGeoLocation = {\r\n        position: {\r\n            lat: geoLocation.latitude,\r\n            lng: geoLocation.longitude,\r\n        },\r\n        zoom: 15\r\n    }\r\n\r\n    const refreshMap = async () => {\r\n        setIsRefreshingMap(true);\r\n        setTimeout(() => {\r\n            setIsRefreshingMap(false);\r\n        }, 100);\r\n    };\r\n\r\n    useEffect(() => {\r\n        refreshMap().catch((e) => console.log(e))\r\n    }, [searchDistance])\r\n\r\n    const Markers = surroundingUserList.map((userInfo: UserInfo) => {\r\n        return <Marker key={userInfo.userID} lat={userInfo.geoLocation.latitude} lng={userInfo.geoLocation.longitude}\r\n                       color=\"yellow\"\r\n                       userInfo={userInfo}/>\r\n    })\r\n\r\n    // https://github.com/google-map-react/google-map-react/issues/184\r\n    return (\r\n        <div style={{height: '80vh', width: \"100%\"}}>\r\n            {!isRefreshingMap && (\r\n                <GoogleMapReact bootstrapURLKeys={{key: APIKEY}} defaultCenter={defaultGeoLocation.position}\r\n                                defaultZoom={defaultGeoLocation.zoom} onGoogleApiLoaded={({map, maps}) =>\r\n                    new maps.Circle({\r\n                        \"strokeColor\": '#FF0000',\r\n                        \"strokeOpacity\": 0.8,\r\n                        \"strokeWeight\": 2,\r\n                        \"fillColor\": '#FF0000',\r\n                        \"fillOpacity\": 0.3,\r\n                        map,\r\n                        \"center\": {lat: geoLocation.latitude, lng: geoLocation.longitude},\r\n                        \"radius\": searchDistance,\r\n                    })}>\r\n                    {Markers}\r\n                    <Marker lat={geoLocation.latitude} lng={geoLocation.longitude} text=\"My Marker\"\r\n                            color=\"green\"/>\r\n                </GoogleMapReact>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default GoogleMaps","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {P2PState} from '../type'\r\n\r\nexport const initialState: P2PState = {\r\n    destinationUserID: ''\r\n}\r\n\r\nconst p2pStatusSlice = createSlice({\r\n    name: 'p2pStatus',\r\n    initialState,\r\n    reducers: {\r\n\r\n        setDestinationUserID: (state, {payload}: PayloadAction<string>) => {\r\n            state.destinationUserID = payload\r\n        },\r\n    },\r\n})\r\nexport const {\r\n    setDestinationUserID\r\n} = p2pStatusSlice.actions;\r\n\r\nexport default p2pStatusSlice.reducer","import {useEffect, useState} from \"react\";\r\n\r\nimport {setIsRegister, setSurroundingUserList, setUserID} from '../store/slices/gSignalingStatus'\r\nimport {setDestinationUserID} from '../store/slices/p2pStatus'\r\nimport {getGSetting, getGSignalingStatus} from '../store/selector'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    AnswerMessage, CloseRequest,\r\n    DeleteResponse,\r\n    IceCandidateRequest,\r\n    JudgeMessageType, OfferMessage,\r\n    RegisterResponse,\r\n    SearchResponse,\r\n    UpdateResponse\r\n} from \"../types/api\";\r\nimport {WSMessages} from \"../handler/wsMessages\";\r\n\r\nconst useConnection = (rawMessage: string, wsMessage: WSMessages, setICECandidate: (iceCandidate: RTCIceCandidate) => void, setOffer: (sdp: string, destination: string) => Promise<void>, setAnswer: (sdp: string) => Promise<void>, disconnect: () => void) => {\r\n    const [isSendRegisterOnce, setIsRegisterOnce] = useState<boolean>(false)\r\n\r\n    const {isRegister, userInfo} = useSelector(getGSignalingStatus)\r\n    const {searchDistance} = useSelector(getGSetting)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        console.log(new Date(), \" : -----rawMessage-------\")\r\n        console.log(rawMessage)\r\n        if (rawMessage === \"\") {\r\n            console.error(\"message is empty\")\r\n            return\r\n        }\r\n        try {\r\n            const messageType = JSON.parse(rawMessage) as JudgeMessageType\r\n            if (typeof messageType === 'undefined') {\r\n                console.error(\"message is undefined\")\r\n                return;\r\n            }\r\n            switch (messageType.type) {\r\n                case 'ping':\r\n                    console.log(new Date(), ': ping')\r\n                    wsMessage.sendPong()\r\n                    break\r\n                case 'register':\r\n                    console.log(new Date(), ': registered')\r\n                    const registerResponse: RegisterResponse = JSON.parse(rawMessage) as RegisterResponse\r\n                    dispatch(setIsRegister())\r\n                    dispatch(setUserID(registerResponse.userID))\r\n                    break\r\n                case 'update':\r\n                    console.log(new Date(), ': update')\r\n                    const updateResponse: UpdateResponse = JSON.parse(rawMessage) as UpdateResponse\r\n                    console.log(new Date(), updateResponse)\r\n                    break\r\n                case 'search':\r\n                    // NOTE: 検索方式にかかわらず返ってくるのは近隣のユーザリスト\r\n                    console.log(new Date(), ': search')\r\n                    const searchResponse: SearchResponse = JSON.parse(rawMessage) as SearchResponse\r\n                    dispatch(setSurroundingUserList(searchResponse.surroundingUserList))\r\n                    break\r\n                case 'delete':\r\n                    console.log(new Date(), ': delete')\r\n                    const deleteResponse: DeleteResponse = JSON.parse(rawMessage) as DeleteResponse\r\n                    console.log(new Date(), deleteResponse)\r\n                    break\r\n                case 'offer':\r\n                    console.log(new Date(), ': offer')\r\n                    const offerMessage: OfferMessage = JSON.parse(rawMessage) as OfferMessage\r\n                    dispatch(setDestinationUserID(offerMessage.destination))\r\n                    setOffer(offerMessage.sdp, offerMessage.destination).catch(\r\n                        e => {\r\n                            console.error(e)\r\n                        }\r\n                    )\r\n                    break\r\n                case 'answer':\r\n                    console.log(new Date(), ': answer')\r\n                    const answerMessage: AnswerMessage = JSON.parse(rawMessage) as AnswerMessage\r\n                    setAnswer(answerMessage.sdp).catch(\r\n                        e => {\r\n                            console.error(e)\r\n                        }\r\n                    )\r\n                    break\r\n                case 'ice':\r\n                    console.log(new Date(), ': ice')\r\n                    const iceCandidate: IceCandidateRequest = JSON.parse(rawMessage) as IceCandidateRequest\r\n                    console.log(iceCandidate.ice)\r\n                    // REFERENCE: https://mebee.info/2020/10/30/post-20771/\r\n                    const t : RTCIceCandidate = JSON.parse(JSON.stringify(iceCandidate.ice)) as RTCIceCandidate\r\n                    console.log(t)\r\n                    const ice = new RTCIceCandidate(t)\r\n                    setICECandidate(ice)\r\n                    break\r\n                case 'close':\r\n                    console.log(new Date(), ': close')\r\n                    const closeRequest: CloseRequest = JSON.parse(rawMessage) as CloseRequest\r\n                    console.log(closeRequest.destination)\r\n                    disconnect()\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }, [dispatch, rawMessage])\r\n\r\n\r\n    useEffect(() => {\r\n        const timeoutUpdate = setInterval(() => {\r\n            if (isRegister) {\r\n                wsMessage.sendUpdate(userInfo)\r\n            }\r\n        }, 5000);\r\n        const timeoutSearch = setInterval(() => {\r\n            if (isRegister) {\r\n                wsMessage.sendStaticSearch(userInfo.geoLocation, searchDistance)\r\n            }\r\n        }, 5000);\r\n        return () => {\r\n            clearTimeout(timeoutUpdate);\r\n            clearTimeout(timeoutSearch);\r\n        };\r\n    }, [isRegister])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isRegister && !isSendRegisterOnce) {\r\n            wsMessage.sendRegister(userInfo)\r\n            setIsRegisterOnce(true)\r\n        }\r\n    }, [isRegister, isSendRegisterOnce])\r\n}\r\n\r\nexport default useConnection","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {GSettingStatus} from '../type'\r\n\r\nexport const initialState: GSettingStatus = {\r\n    searchDistance : 100,\r\n    searchType : \"STATIC\",\r\n}\r\n\r\nconst gSettingSlice = createSlice({\r\n    name: 'gSetting',\r\n    initialState,\r\n    reducers: {\r\n\r\n        setSearchDistance: (state, {payload}: PayloadAction<number>) => {\r\n            state.searchDistance = payload\r\n        },\r\n\r\n        setStaticSearch: (state) => {\r\n            state.searchType = 'STATIC'\r\n        },\r\n\r\n        setDynamicSearch: (state) => {\r\n            state.searchType = 'DYNAMIC'\r\n        },\r\n    },\r\n})\r\n\r\nexport const {setSearchDistance, setDynamicSearch, setStaticSearch} = gSettingSlice.actions;\r\n\r\nexport default gSettingSlice.reducer","import {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {getGSetting} from '../store/selector'\r\nimport {getGSignalingStatus} from '../store/selector'\r\nimport {setDynamicSearch, setSearchDistance, setStaticSearch} from '../store/slices/gSetting'\r\nimport TextField from \"@mui/material/TextField\";\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Button from '@mui/material/Button';\r\nimport Select, {SelectChangeEvent} from '@mui/material/Select';\r\nimport {useRef} from \"react\";\r\n\r\nconst OperationPanel = () => {\r\n    const searchDistanceFiledRef = useRef<HTMLInputElement>()\r\n\r\n    const {searchDistance, searchType} = useSelector(getGSetting)\r\n    const {userInfo, surroundingUserList, userID} = useSelector(getGSignalingStatus)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n        if (event.target.value === 'static') {\r\n            dispatch(setStaticSearch())\r\n        } else {\r\n            dispatch(setDynamicSearch())\r\n        }\r\n    };\r\n\r\n    const handleSearchDistanceChange = () => {\r\n        if (searchDistanceFiledRef.current) {\r\n            console.log(searchDistanceFiledRef.current?.value)\r\n            dispatch(setSearchDistance(Number(searchDistanceFiledRef.current?.value)))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{}}>\r\n            <div>{userInfo.geoLocation.latitude + \" , \" + userInfo.geoLocation.longitude}</div>\r\n            <div>{\"surroundingUserList size :\" + surroundingUserList.length}</div>\r\n            <div>{\"userID : \" + userID}</div>\r\n            <FormControl sx={{m: 1, minWidth: 80}}>\r\n                <TextField inputRef={searchDistanceFiledRef} id={'search-distance'} label={\"SearchDistance\"}\r\n                           defaultValue={searchDistance}/>\r\n            </FormControl>\r\n            <Button variant='contained' onClick={handleSearchDistanceChange}>SetDistance</Button>\r\n            <FormControl sx={{m: 1, minWidth: 200}}>\r\n                <InputLabel id=\"demo-simple-select-autowidth-label\">SearchType</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-autowidth-label\"\r\n                    id=\"demo-simple-select-autowidth\"\r\n                    value={'static'}\r\n                    onChange={handleChange}\r\n                    autoWidth\r\n                    label={searchType}\r\n                >\r\n                    <MenuItem value='static'>Static Search</MenuItem>\r\n                    <MenuItem value='dynamic'>Dynamic Search</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\nexport default OperationPanel","import React, {useState} from \"react\";\r\n\r\nconst Video = (props: any) => {\r\n    const [isPlay, setIsPlay] = useState<Boolean>(false);\r\n\r\n    // playとsetを分ける\r\n    const playVideo = async (element: any, stream: any) => {\r\n        element.srcObject = stream\r\n        try {\r\n            await element.play()\r\n            setIsPlay(!isPlay)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const pauseVideo = (element: any) => {\r\n        element.pause()\r\n        setIsPlay(!isPlay)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <video ref={props.localVideoRef} autoPlay={true}\r\n                   style={{width: '320px', height: '240px', border: '1px solid black'}}/>\r\n            <video ref={props.remoteVideoRef} autoPlay={true}\r\n                   style={{width: '320px', height: '240px', border: '1px solid black'}}/>\r\n            {isPlay ? (<button onClick={pauseVideo}>pauseVideo</button>) : (<button onClick={() => playVideo}>playVideo</button>)}\r\n        </>\r\n    )\r\n}\r\nexport default Video\r\n","// https://zenn.dev/tris/articles/2021-10-react-leaflet-ts-gsi\r\n// https://www.ipride.co.jp/blog/3425\r\n\r\nimport {LatLng} from \"leaflet\";\r\nimport {Circle, MapContainer, Marker, Popup, TileLayer} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getGSetting, getGSignalingStatus} from \"../store/selector\";\r\nimport {UserInfo} from \"../types/domain\";\r\n\r\n// NOTE: marker setting\r\nlet DefaultIcon = Leaflet.icon({\r\n    iconUrl: icon,\r\n    shadowUrl: iconShadow,\r\n});\r\nLeaflet.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nconst OpenStreetMaps = () => {\r\n    //const position = new LatLng(51.505, -0.09)\r\n    // ラジアンから経度緯度へ\r\n    //const position = new LatLng(35.943250 * Math.PI / 180, 139.621090 * Math.PI / 180)\r\n\r\n    const {surroundingUserList, userInfo: {geoLocation}} = useSelector(getGSignalingStatus)\r\n\r\n    const Markers = surroundingUserList.map((userInfo: UserInfo) => {\r\n        return <Marker key={userInfo.userID} position={new LatLng(userInfo.geoLocation.latitude, userInfo.geoLocation.longitude)}/>\r\n    })\r\n\r\n    const position = new LatLng(geoLocation.latitude, geoLocation.longitude)\r\n    return (\r\n        <MapContainer center={position} zoom={15} style={{height: '80vh'}}>\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Circle center={position} radius={100}/>\r\n            {Markers}\r\n            <Marker position={position}>\r\n                <Popup>\r\n                    aaaaaa\r\n                </Popup>\r\n            </Marker>\r\n        </MapContainer>\r\n    )\r\n}\r\nexport default OpenStreetMaps","import {GeoLocation, UserInfo} from \"../types/domain\";\r\nimport {\r\n    AnswerMessage,\r\n    CloseRequest,\r\n    DeleteRequest, IceCandidateRequest, OfferMessage,\r\n    PongRequest,\r\n    RegisterRequest,\r\n    SearchRequest,\r\n    SendRequest,\r\n    UpdateRequest\r\n} from \"../types/api\";\r\n\r\nexport class WSMessages {\r\n    constructor(private readonly sendMessage: any) {\r\n    }\r\n\r\n    sendPong() {\r\n        const message: PongRequest = {\r\n            type: 'pong'\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendRegister(userInfo: UserInfo) {\r\n        const message: RegisterRequest = {\r\n            type: 'register',\r\n            geoLocation: {\r\n                latitude: userInfo.geoLocation.latitude,\r\n                longitude: userInfo.geoLocation.longitude,\r\n            },\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendUpdate(userInfo: UserInfo) {\r\n        const message: UpdateRequest = {\r\n            type: 'update',\r\n            userInfo: userInfo,\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendStaticSearch(geoLocation: GeoLocation, searchDistance: number) {\r\n        const message: SearchRequest = {\r\n            type: 'search',\r\n            searchType: 'static',\r\n            searchDistance: searchDistance,\r\n            geoLocation: geoLocation,\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendDynamicSearch(geoLocation: GeoLocation, searchDistance: number) {\r\n        const message: SearchRequest = {\r\n            type: 'search',\r\n            searchType: 'dynamic',\r\n            searchDistance: searchDistance,\r\n            geoLocation: geoLocation,\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendDelete() {\r\n        const message: DeleteRequest = {\r\n            type: 'delete',\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendSend() {\r\n        const message: SendRequest = {\r\n            type: 'delete',\r\n            message: 'test'\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendOffer(sdp: string, destinationUserID: string) {\r\n        const message: OfferMessage = {\r\n            type: 'offer',\r\n            sdp: sdp,\r\n            destination: destinationUserID\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendAnswer(sdp: string, destinationUserID: string) {\r\n        const message: AnswerMessage = {\r\n            type: 'answer',\r\n            sdp: sdp,\r\n            destination: destinationUserID\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendClose(destinationUserID: string) {\r\n        const message: CloseRequest = {\r\n            type: 'close',\r\n            destination: destinationUserID\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n\r\n    sendCandidate(ice: string) {\r\n        const message: IceCandidateRequest = {\r\n            type: 'ice',\r\n            ice: ice,\r\n        }\r\n        this.sendMessage(JSON.stringify(message))\r\n    }\r\n}","import React, {useEffect, useRef} from \"react\";\r\n\r\nconst useUserMedia = (videoRef: React.RefObject<HTMLVideoElement>) => {\r\n    const localStream = useRef<MediaStream>()\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({audio: false, video: true}).then(\r\n            (stream) => {\r\n                videoRef.current!.srcObject = stream\r\n                localStream.current = stream\r\n            }\r\n        ).catch((error) => {\r\n                console.log(error)\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    return localStream\r\n}\r\n\r\nexport default useUserMedia","// REFERENCE: https://html5experts.jp/mganeko/19814/\r\n// REFERENCE: https://qiita.com/yusuke84/items/43a20e3b6c78ae9a8f6c\r\n// REFERENCE: https://www.w3.org/TR/webrtc/#simple-peer-to-peer-example\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {WSMessages} from \"./wsMessages\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getP2PStatus} from \"../store/selector\";\r\n\r\nconst RTConnection = (localStream: React.MutableRefObject<MediaStream | undefined>, localVideoRef: React.RefObject<HTMLVideoElement>, remoteVideoRef: React.RefObject<HTMLVideoElement>, wsMessage: WSMessages, localMessageRef: React.RefObject<HTMLTextAreaElement>, remoteMessageRef: React.RefObject<HTMLTextAreaElement>) => {\r\n    const rtcPeerConnection = useRef<RTCPeerConnection>(null!)\r\n    const rtcDataChannel = useRef<RTCDataChannel>(null!)\r\n\r\n    const {destinationUserID} = useSelector(getP2PStatus)\r\n\r\n    // NOTE: 相手のMediaStreamTrackの受信\r\n    const onTrack = async (e: any) => {\r\n        console.log(new Date(), 'ontrack', e)\r\n        console.log(remoteVideoRef)\r\n        remoteVideoRef.current!.srcObject = e.streams[0]\r\n        await remoteVideoRef.current?.play()\r\n    }\r\n\r\n    // NOTE: Vanilla ICE\r\n    const onIcecandidate = (candidate: any) => {\r\n        console.log(new Date(), 'candidate')\r\n        if (candidate && candidate.candidate) {\r\n            console.log(candidate)\r\n            //wsMessage.sendCandidate(rtcPeerConnection.current.localDescription!.sdp)\r\n            wsMessage.sendCandidate(candidate.candidate)\r\n            console.log(new Date(), candidate.candidate)\r\n            // Trickle ICEはここで送信\r\n        } else {\r\n            // NOTE: 空のICE Candidateは収集終了の知らせ\r\n            // Vanilla ICE\r\n            //wsMessage.sendCandidate(rtcPeerConnection.current.localDescription!.sdp, destinationUserID)\r\n        }\r\n    }\r\n\r\n    const onNegotiationneeded = async () => {\r\n        console.log(\"negotiationneeded\")\r\n        try {\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const onIceConnectionstatechange = () => {\r\n        console.log(new Date(), 'ice status has changed', rtcPeerConnection.current.iceConnectionState)\r\n    }\r\n\r\n    const onDataChannel = (evt : any) => {\r\n        evt.channel.addEventListener('open', onOpen)\r\n        evt.channel.addEventListener('message', onMessage)\r\n        evt.channel.addEventListener('close', onClose)\r\n        evt.channel.addEventListener('error', onError)\r\n        rtcDataChannel.current = evt.channel\r\n    }\r\n\r\n    // NOTE: --------dataChannel--------------------\r\n    const onOpen = () => {\r\n    }\r\n\r\n    const onMessage = (e: any) => {\r\n        remoteMessageRef.current!.value = ' < ' + e.data + '\\n' + remoteMessageRef.current!.value\r\n    }\r\n\r\n    const onClose = () => {\r\n    }\r\n\r\n\r\n    const onError = (e: any) => {\r\n        console.error(e)\r\n    }\r\n\r\n    const makeRTCPeerConnection = () => {\r\n        // TODO: TURNを考える\r\n        const pcConfig = {\"iceServers\": [{\"urls\": \"stun:stun.l.google.com:19302\"}]}\r\n        rtcPeerConnection.current = new RTCPeerConnection(pcConfig)\r\n        console.log(new Date(), 'make')\r\n        rtcPeerConnection.current.addEventListener('track', onTrack)\r\n        rtcPeerConnection.current.addEventListener('icecandidate', onIcecandidate)\r\n        rtcPeerConnection.current.addEventListener('negotiationneeded', onNegotiationneeded)\r\n        rtcPeerConnection.current.addEventListener('iceconnectionstatechange', onIceConnectionstatechange)\r\n        rtcPeerConnection.current.addEventListener('datachannel', onDataChannel)\r\n        localStream.current!.getTracks().forEach(\r\n            track => rtcPeerConnection.current.addTrack(track, localStream.current!)\r\n        )\r\n\r\n        // NOTE: DataChannel\r\n        // TODO: datachannelOptionについて調べる\r\n        rtcDataChannel.current = rtcPeerConnection.current.createDataChannel('message-data-channel')\r\n        rtcDataChannel.current.addEventListener('open', onOpen)\r\n        rtcDataChannel.current.addEventListener('message', onMessage)\r\n        rtcDataChannel.current.addEventListener('close', onClose)\r\n        rtcDataChannel.current.addEventListener('error', onError)\r\n    }\r\n\r\n    const setICECandidate = (iceCandidate: RTCIceCandidate) => {\r\n        console.log(new Date(), 'add ICE candidate')\r\n        rtcPeerConnection.current.addIceCandidate(iceCandidate).catch(\r\n            e => {\r\n                console.log(e)\r\n            }\r\n        )\r\n    }\r\n\r\n    // NOTE: 相手からのOffer要請を登録する自分はAnswer側\r\n    const setOffer = async (sdp: string, destination: string) => {\r\n        makeRTCPeerConnection()\r\n        await rtcPeerConnection.current.setRemoteDescription({type: 'offer', sdp: sdp}).catch(\r\n            e => {\r\n                console.log(e)\r\n            }\r\n        )\r\n        await makeAnswer(destination)\r\n    }\r\n\r\n    const makeAnswer = async (destination: string) => {\r\n        const answer = await rtcPeerConnection.current.createAnswer()\r\n        await rtcPeerConnection.current.setLocalDescription(answer)\r\n        // NOTE: undefined許容型\r\n        console.log(new Date(), '-----sendAnswer--------', answer.type)\r\n        wsMessage.sendAnswer(answer.sdp!, destination)\r\n    }\r\n\r\n    // NOTE: 相手からのAnswer要請を登録する自分はOffer側\r\n    const setAnswer = async (sdp: string) => {\r\n        await rtcPeerConnection.current.setRemoteDescription({type: 'answer', sdp: sdp})\r\n    }\r\n\r\n    const connect = async (userID: string) => {\r\n        makeRTCPeerConnection()\r\n        const sdp = await rtcPeerConnection.current.createOffer()\r\n        console.log(new Date(), 'sdp', sdp)\r\n        await rtcPeerConnection.current.setLocalDescription(sdp)\r\n        // NOTE: Send SDP\r\n        wsMessage.sendOffer(sdp.sdp!, userID)\r\n        console.log(new Date(), '-----------------------------------connect-----------------')\r\n    }\r\n\r\n    const disconnect = () => {\r\n        rtcPeerConnection.current.close()\r\n        wsMessage.sendClose(destinationUserID)\r\n    }\r\n\r\n    const sendDateChanelMessage = () => {\r\n        if (!rtcPeerConnection.current || rtcPeerConnection.current.connectionState !== 'connected') {\r\n            console.error('rtcPeerConnection is null')\r\n            return\r\n        }\r\n        const message = localMessageRef.current!.value;\r\n        localMessageRef.current!.value = ''\r\n\r\n        remoteMessageRef.current!.value = ' > ' + message + '\\n' + remoteMessageRef.current!.value\r\n        rtcDataChannel.current.send(message)\r\n    }\r\n\r\n    return [setICECandidate, setOffer, setAnswer, connect, disconnect, sendDateChanelMessage] as const\r\n}\r\n\r\nexport default RTConnection","import {Helmet, HelmetProvider} from 'react-helmet-async'\r\nimport {useRef, useState} from \"react\";\r\n\r\nimport useGeoLocationStatus from \"../hooks/useGeoLocation\"\r\nimport useWebSocket from \"../hooks/useWebSocket\"\r\nimport HeaderBar from \"../components/HeaderBar\"\r\nimport GoogleMaps from \"../components/GoogleMaps\";\r\nimport useConnection from \"../hooks/useConnection\";\r\nimport OperationPanel from \"../components/OperationPanel\"\r\nimport Video from \"../components/Video\";\r\nimport OpenStreetMaps from \"../components/OpenStreetMaps\";\r\nimport {WSMessages} from \"../handler/wsMessages\";\r\nimport useUserMedia from \"../hooks/useUserMedia\";\r\nimport RTConnection from \"../handler/RTConnection\";\r\n\r\nfunction App() {\r\n    const localVideoRef = useRef<HTMLVideoElement>(null)\r\n    const remoteVideoRef = useRef<HTMLVideoElement>(null)\r\n\r\n    const localMessageRef = useRef<HTMLTextAreaElement>(null)\r\n    const remoteMessageRef = useRef<HTMLTextAreaElement>(null)\r\n\r\n    const stream = useUserMedia(localVideoRef)\r\n    useGeoLocationStatus()\r\n    // NOTE: WebSocket接続\r\n    const [message, sendMessage] = useWebSocket()\r\n    const wsMessage = new WSMessages(sendMessage)\r\n    // NOTE: WebRTC関連処理\r\n    const [setICECandidate, setOffer, setAnswer, connect, disconnect,sendDataChanelMessage] = RTConnection(stream, localVideoRef, remoteVideoRef, wsMessage, localMessageRef, remoteMessageRef)\r\n    useConnection(message, wsMessage, setICECandidate, setOffer, setAnswer, disconnect)\r\n\r\n    // TODO:　後で場所変更させる\r\n    const [isMapGoogle, setIsMapGoogle] = useState<boolean>(true)\r\n    const [destination, setDestination] = useState<string>('setDestination')\r\n\r\n    const changeMap = () => {\r\n        setIsMapGoogle(!isMapGoogle)\r\n    }\r\n\r\n    const handleChange = (event : any) => {\r\n        setDestination(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\" style={{textAlign: \"center\"}}>\r\n            <HelmetProvider>\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\"/>\r\n                    <title>web-g</title>\r\n                    <link rel=\"\" href=\"https://web-g\"/>\r\n                </Helmet>\r\n                <HeaderBar/>\r\n                {isMapGoogle ? (<GoogleMaps connect={connect}/>) : (<OpenStreetMaps/>)}\r\n                <button onClick={changeMap}>Change map</button>\r\n                <button onClick={async () => connect(destination)}>Connect</button>\r\n                <textarea value={destination} onChange={handleChange}/>\r\n                <OperationPanel/>\r\n                <Video localVideoRef={localVideoRef} remoteVideoRef={remoteVideoRef}/>\r\n                <textarea readOnly={true} ref={remoteMessageRef}/>\r\n                <textarea ref={localMessageRef}/>\r\n                <button onClick={sendDataChanelMessage}>SendDataChannel</button>\r\n            </HelmetProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import {createSlice} from '@reduxjs/toolkit'\r\nimport {WebSocketConnectionState} from '../type'\r\n\r\nexport const initialState: WebSocketConnectionState = {\r\n    wsConnectionType : 'CONNECTING'\r\n}\r\n\r\nconst wsConnectionSlice = createSlice({\r\n    name: 'wsConnection',\r\n    initialState,\r\n    reducers: {\r\n\r\n        connecting: (state) => {\r\n            state.wsConnectionType = 'CONNECTING'\r\n        },\r\n\r\n        connected: (state) => {\r\n            state.wsConnectionType = 'CONNECTED'\r\n        },\r\n\r\n        reconnecting: (state) => {\r\n            state.wsConnectionType = 'RECONNECTING'\r\n        },\r\n\r\n        reconnected: (state) => {\r\n            state.wsConnectionType = 'RECONNECTED'\r\n        },\r\n    },\r\n})\r\n\r\nexport const {connecting, connected, reconnecting, reconnected} = wsConnectionSlice.actions;\r\n\r\nexport default wsConnectionSlice.reducer\r\n","import {Reducer, combineReducers} from \"redux\";\r\nimport WSConnectionStatus from './wsConnectionStatus'\r\nimport GSignalingStatus from './gSignalingStatus'\r\nimport GSetting from './gSetting'\r\nimport P2PStatus from './p2pStatus'\r\nimport {GSettingStatus, P2PState} from '../type'\r\nimport {GSignalingState} from '../type'\r\nimport {WebSocketConnectionState} from '../type'\r\n\r\nexport type RootState = {\r\n    wsConnectionState: WebSocketConnectionState\r\n    gSetting: GSettingStatus\r\n    gSignalingState: GSignalingState\r\n    p2pState: P2PState\r\n}\r\n\r\nconst rootReducer: Reducer<RootState> = combineReducers<RootState>({\r\n    wsConnectionState: WSConnectionStatus,\r\n    gSetting: GSetting,\r\n    gSignalingState: GSignalingStatus,\r\n    p2pState: P2PStatus,\r\n})\r\n\r\nexport default rootReducer\r\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport {useSelector as rawUseSelector, TypedUseSelectorHook} from \"react-redux\";\r\nimport rootReducer from \"./slices\";\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    // NOTE: Chromeの拡張機能のReduxToolKitを使えるようにする\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n})\r\n\r\n// https://future-architect.github.io/articles/20200501/\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport const useSelector: TypedUseSelectorHook<RootState> = rawUseSelector;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './views/App';\nimport {Provider} from 'react-redux'\nimport {store} from './store'\n// NOTE: 再レンダーしているとこを教えてくれる\nimport { whyDidYouUpdate } from 'why-did-you-update'\n\nwhyDidYouUpdate(React)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}